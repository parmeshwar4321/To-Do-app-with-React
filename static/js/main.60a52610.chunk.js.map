{"version":3,"sources":["components/Task-list/index.js","components/Task-list/task-list.jsx","App.js","index.js"],"names":["MyTaskList","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","Card","fluid","style","Content","Header","textAlign","wordWrap","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","splice","as","className","Form","this","Input","type","placeholder","Group","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a52610.chunk.js","sourcesContent":["import MyTaskList from \"./task-list\";\n\nexport default MyTaskList;","import React, { Component } from \"react\";\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\nimport \"./task-list.css\";\n\nclass MyTaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: \"\",\n      tasklist: []\n    };\n  }\n\n  // on load get the task list\n  componentDidMount = () => {\n    this.getTasks();\n  };\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // add task to the list\n  onSubmit = () => {\n    // check is task is empty string\n    if (this.state.task) {\n      // get the task list from the local storage\n      let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n\n      // task list is null means empty\n      // create an empty list\n      if (tasklist == null) {\n        tasklist = [];\n      }\n\n      // create task object\n      // default status is false\n      let task = {\n        task: `üìù ${this.state.task}`,\n        status: false\n      };\n\n      // add the task to the task list\n      tasklist.push(task);\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // clear the form\n      this.setState({ task: \"\" });\n\n      // refresh the tasks\n      this.getTasks();\n    }\n  };\n\n  // get all the tasks\n  getTasks = () => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // console.log(tasklist);\n\n    // check if task list is empty\n    if (tasklist) {\n      // sort all the tasks on the basis of status\n      // completed task will move down\n      tasklist = tasklist.sort((a, b) => {\n        if (a.status) {\n          return 1;\n        } else if (b.status) {\n          return -1;\n        }\n        return 0;\n      });\n\n      // save the task list in the local storage\n      localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n\n      // set the tasklist to the state\n      this.setState({\n        // default color\n        // Incomplete: yellow\n        // complete: green\n        tasklist: tasklist.map((item, index) => {\n          let color = \"yellow\";\n          let cardBackground = { background: \"white\" };\n          let taskComplete = { textDecoration: \"none\" };\n\n          if (item.status) {\n            color = \"green\";\n            cardBackground.background = \"beige\";\n            taskComplete[\"textDecoration\"] = \"line-through\";\n          }\n          return (\n            <Card key={index} color={color} fluid style={cardBackground}>\n              <Card.Content>\n                <Card.Header textAlign=\"left\" style={taskComplete}>\n                  <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\n                </Card.Header>\n\n                <Card.Meta textAlign=\"right\">\n                  <Icon\n                    link\n                    name=\"check circle\"\n                    color=\"green\"\n                    onClick={() => this.updateTask(index)}\n                  />\n                  <span style={{ paddingRight: 10 }}>Done</span>\n                  <Icon\n                    link\n                    name=\"undo\"\n                    color=\"yellow\"\n                    onClick={() => this.undoTask(index)}\n                  />\n                  <span style={{ paddingRight: 10 }}>Undo</span>\n                  <Icon\n                    link\n                    name=\"delete\"\n                    color=\"red\"\n                    onClick={() => this.deleteTask(index)}\n                  />\n                  <span style={{ paddingRight: 10 }}>Delete</span>\n                </Card.Meta>\n              </Card.Content>\n            </Card>\n          );\n        })\n      });\n    }\n  };\n\n  // update the task status to true\n  updateTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to true\n    tasklist[index].status = true;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // undone the task status from true to false\n  undoTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // change status to false\n    tasklist[index].status = false;\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  // delete the task from the task list\n  deleteTask = index => {\n    // get the task list from the local storage\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    // remove the task from the task list\n    tasklist.splice(index, 1);\n    // save the updated task list\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    // refresh the task list\n    this.getTasks();\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Header as=\"h1\">\n            <div className=\"app-header\">üìù My Task List</div>{\" \"}\n          </Header>\n        </div>\n        <div className=\"app-form\">\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              type=\"text\"\n              name=\"task\"\n              onChange={this.onChange}\n              value={this.state.task}\n              fluid\n              placeholder=\"task...\"\n            />\n          </Form>\n        </div>\n        <div>\n          <Card.Group>{this.state.tasklist}</Card.Group>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MyTaskList;      ","import React from \"react\";\nimport \"./App.css\";\nimport MyTaskList from \"./components/Task-list\";\n\nfunction App() {\n  return (\n    <div>\n      <MyTaskList></MyTaskList>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}